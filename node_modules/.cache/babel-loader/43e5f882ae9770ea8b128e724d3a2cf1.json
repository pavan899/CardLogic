{"ast":null,"code":"import _slicedToArray from \"C:\\\\Projects\\\\Rummy\\\\CardLogic\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"C:\\\\Projects\\\\Rummy\\\\CardLogic\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport React from 'react';\n\nvar checkSetType = function checkSetType(cards, numbers) {\n  var unique = _toConsumableArray(new Set(cards.map(function (card) {\n    return card.shape;\n  }))); // Checks if the cards are unique shape\n\n\n  if (unique.length === 1) {\n    var differenceAry = numbers.sort(function (a, b) {\n      return a - b;\n    }).slice(1).map(function (n, i) {\n      return n - numbers[i];\n    });\n    var isSequence = differenceAry.every(function (value) {\n      return value == 1;\n    });\n\n    if (isSequence) {\n      return true;\n    }\n  } else {\n    var uniqueCards = _toConsumableArray(new Set(numbers.map(function (card) {\n      return card;\n    })));\n\n    if (uniqueCards.length === 1) {\n      return true;\n    }\n  }\n};\n\nvar SetValidation = function SetValidation(cards, count, openJoker) {\n  // Checks if three or more cards are present\n  if (count < 3) return false;\n\n  if (count >= 3) {\n    // lists all the numbers of the cards\n    var numbers = cards.map(function (card) {\n      return card.number;\n    }); // checks if the cards are same shape\n\n    if (checkSetType(cards, numbers)) {\n      return true;\n    }\n\n    ;\n\n    var _openJoker = _slicedToArray(openJoker, 1),\n        joker = _openJoker[0];\n\n    if (numbers.includes(joker.number)) {\n      // const luckySequence = differenceAry.every(value => value == differenceAry.length - 1);\n      var jokerExcluded = cards.filter(function (card) {\n        return card.number !== joker.number;\n      });\n      var values = jokerExcluded.map(function (card) {\n        return card.number;\n      });\n\n      if (checkSetType(jokerExcluded, numbers)) {\n        return true;\n      }\n\n      ;\n    }\n\n    return false;\n  }\n};\n\nexport default SetValidation;","map":{"version":3,"names":["React","checkSetType","cards","numbers","unique","Set","map","card","shape","length","differenceAry","sort","a","b","slice","n","i","isSequence","every","value","uniqueCards","SetValidation","count","openJoker","number","joker","includes","jokerExcluded","filter","values"],"sources":["C:/Projects/Rummy/CardLogic/src/Components/SetValidation.js"],"sourcesContent":["import React from 'react';\r\n\r\nconst checkSetType = (cards, numbers) =>{\r\n    const unique = [...new Set(cards.map(card => card.shape))];\r\n    // Checks if the cards are unique shape\r\n    if (unique.length === 1) {\r\n        const differenceAry = numbers.sort((a, b) => a - b).slice(1).map(function (n, i) { return n - numbers[i]; })\r\n        const isSequence = differenceAry.every(value => value == 1);\r\n        if (isSequence) {\r\n            return true;\r\n        }\r\n    } else {\r\n        const uniqueCards = [...new Set(numbers.map(card => card))];\r\n        if (uniqueCards.length === 1) {\r\n            return true;\r\n        }\r\n    }\r\n}\r\nconst SetValidation = (cards, count, openJoker) => {\r\n    // Checks if three or more cards are present\r\n    if (count < 3) return false;\r\n    if (count >= 3) {\r\n        // lists all the numbers of the cards\r\n        const numbers = cards.map((card) => {\r\n            return card.number;\r\n        })\r\n        // checks if the cards are same shape\r\n        if(checkSetType(cards, numbers)){\r\n            return true;\r\n        };\r\n        const [joker] = openJoker;\r\n        if (numbers.includes(joker.number)) {\r\n            // const luckySequence = differenceAry.every(value => value == differenceAry.length - 1);\r\n            const jokerExcluded = cards.filter((card) => {\r\n                return card.number !== joker.number;\r\n            })\r\n            const values = jokerExcluded.map((card) => {\r\n                return card.number;\r\n            })\r\n            if(checkSetType(jokerExcluded, numbers)){\r\n                return true;\r\n            };\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\nexport default SetValidation;"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAEA,IAAMC,YAAY,GAAG,SAAfA,YAAe,CAACC,KAAD,EAAQC,OAAR,EAAmB;EACpC,IAAMC,MAAM,sBAAO,IAAIC,GAAJ,CAAQH,KAAK,CAACI,GAAN,CAAU,UAAAC,IAAI;IAAA,OAAIA,IAAI,CAACC,KAAT;EAAA,CAAd,CAAR,CAAP,CAAZ,CADoC,CAEpC;;;EACA,IAAIJ,MAAM,CAACK,MAAP,KAAkB,CAAtB,EAAyB;IACrB,IAAMC,aAAa,GAAGP,OAAO,CAACQ,IAAR,CAAa,UAACC,CAAD,EAAIC,CAAJ;MAAA,OAAUD,CAAC,GAAGC,CAAd;IAAA,CAAb,EAA8BC,KAA9B,CAAoC,CAApC,EAAuCR,GAAvC,CAA2C,UAAUS,CAAV,EAAaC,CAAb,EAAgB;MAAE,OAAOD,CAAC,GAAGZ,OAAO,CAACa,CAAD,CAAlB;IAAwB,CAArF,CAAtB;IACA,IAAMC,UAAU,GAAGP,aAAa,CAACQ,KAAd,CAAoB,UAAAC,KAAK;MAAA,OAAIA,KAAK,IAAI,CAAb;IAAA,CAAzB,CAAnB;;IACA,IAAIF,UAAJ,EAAgB;MACZ,OAAO,IAAP;IACH;EACJ,CAND,MAMO;IACH,IAAMG,WAAW,sBAAO,IAAIf,GAAJ,CAAQF,OAAO,CAACG,GAAR,CAAY,UAAAC,IAAI;MAAA,OAAIA,IAAJ;IAAA,CAAhB,CAAR,CAAP,CAAjB;;IACA,IAAIa,WAAW,CAACX,MAAZ,KAAuB,CAA3B,EAA8B;MAC1B,OAAO,IAAP;IACH;EACJ;AACJ,CAfD;;AAgBA,IAAMY,aAAa,GAAG,SAAhBA,aAAgB,CAACnB,KAAD,EAAQoB,KAAR,EAAeC,SAAf,EAA6B;EAC/C;EACA,IAAID,KAAK,GAAG,CAAZ,EAAe,OAAO,KAAP;;EACf,IAAIA,KAAK,IAAI,CAAb,EAAgB;IACZ;IACA,IAAMnB,OAAO,GAAGD,KAAK,CAACI,GAAN,CAAU,UAACC,IAAD,EAAU;MAChC,OAAOA,IAAI,CAACiB,MAAZ;IACH,CAFe,CAAhB,CAFY,CAKZ;;IACA,IAAGvB,YAAY,CAACC,KAAD,EAAQC,OAAR,CAAf,EAAgC;MAC5B,OAAO,IAAP;IACH;;IAAA;;IARW,gCASIoB,SATJ;IAAA,IASLE,KATK;;IAUZ,IAAItB,OAAO,CAACuB,QAAR,CAAiBD,KAAK,CAACD,MAAvB,CAAJ,EAAoC;MAChC;MACA,IAAMG,aAAa,GAAGzB,KAAK,CAAC0B,MAAN,CAAa,UAACrB,IAAD,EAAU;QACzC,OAAOA,IAAI,CAACiB,MAAL,KAAgBC,KAAK,CAACD,MAA7B;MACH,CAFqB,CAAtB;MAGA,IAAMK,MAAM,GAAGF,aAAa,CAACrB,GAAd,CAAkB,UAACC,IAAD,EAAU;QACvC,OAAOA,IAAI,CAACiB,MAAZ;MACH,CAFc,CAAf;;MAGA,IAAGvB,YAAY,CAAC0B,aAAD,EAAgBxB,OAAhB,CAAf,EAAwC;QACpC,OAAO,IAAP;MACH;;MAAA;IACJ;;IACD,OAAO,KAAP;EACH;AACJ,CA3BD;;AA6BA,eAAekB,aAAf"},"metadata":{},"sourceType":"module"}