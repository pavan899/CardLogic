{"ast":null,"code":"import _slicedToArray from \"C:\\\\Projects\\\\Rummy\\\\CardLogic\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/slicedToArray\";\nimport _toConsumableArray from \"C:\\\\Projects\\\\Rummy\\\\CardLogic\\\\node_modules\\\\babel-preset-react-app\\\\node_modules\\\\@babel\\\\runtime/helpers/esm/toConsumableArray\";\nimport React from 'react';\n\nvar SetValidation = function SetValidation(cards, count, openJoker) {\n  // Checks if three or more cards are present\n  if (count < 3) return false;\n\n  if (count >= 3) {\n    // checks if the cards are same shape\n    var unique = _toConsumableArray(new Set(cards.map(function (card) {\n      return card.shape;\n    }))); // lists all the numbers of the cards\n\n\n    var numbers = cards.map(function (card) {\n      return card.number;\n    });\n\n    if (unique.length === 1) {\n      var differenceAry = numbers.sort(function (a, b) {\n        return a - b;\n      }).slice(1).map(function (n, i) {\n        return n - numbers[i];\n      });\n      var isSequence = differenceAry.every(function (value) {\n        return value == 1;\n      });\n\n      if (isSequence) {\n        return true;\n      }\n    } else {\n      var uniqueCards = _toConsumableArray(new Set(numbers.map(function (card) {\n        return card;\n      })));\n\n      if (uniqueCards.length === 1) {\n        return true;\n      }\n    }\n\n    var _openJoker = _slicedToArray(openJoker, 1),\n        joker = _openJoker[0];\n\n    if (numbers.includes(joker.number)) {\n      // const luckySequence = differenceAry.every(value => value == differenceAry.length - 1);\n      var jokerExcluded = cards.filter(function (card) {\n        return card.number !== joker.number;\n      });\n      console.log(\"joker excluded: \", jokerExcluded);\n    }\n\n    return false;\n  }\n};\n\nexport default SetValidation;","map":{"version":3,"names":["React","SetValidation","cards","count","openJoker","unique","Set","map","card","shape","numbers","number","length","differenceAry","sort","a","b","slice","n","i","isSequence","every","value","uniqueCards","joker","includes","jokerExcluded","filter","console","log"],"sources":["C:/Projects/Rummy/CardLogic/src/Components/SetValidation.js"],"sourcesContent":["import React from 'react';\r\n\r\n\r\nconst SetValidation = (cards, count, openJoker) => {\r\n    // Checks if three or more cards are present\r\n    if (count < 3) return false;\r\n    if (count >= 3) {\r\n        // checks if the cards are same shape\r\n        const unique = [...new Set(cards.map(card => card.shape))];\r\n        // lists all the numbers of the cards\r\n        const numbers = cards.map((card) => {\r\n            return card.number;\r\n        })\r\n        if (unique.length === 1) {\r\n            const differenceAry = numbers.sort((a, b) => a - b).slice(1).map(function (n, i) { return n - numbers[i]; })\r\n            const isSequence = differenceAry.every(value => value == 1);\r\n            if (isSequence) {\r\n                return true;\r\n            }\r\n        } else {\r\n            const uniqueCards = [...new Set(numbers.map(card => card))];\r\n            if (uniqueCards.length === 1) {\r\n                return true;\r\n            }\r\n        }\r\n        const [joker] = openJoker;\r\n        if (numbers.includes(joker.number)) {\r\n            // const luckySequence = differenceAry.every(value => value == differenceAry.length - 1);\r\n            const jokerExcluded = cards.filter((card) => {\r\n                return card.number !== joker.number;\r\n            })\r\n            console.log(\"joker excluded: \", jokerExcluded)\r\n        }\r\n        return false;\r\n    }\r\n}\r\n\r\nexport default SetValidation;"],"mappings":";;AAAA,OAAOA,KAAP,MAAkB,OAAlB;;AAGA,IAAMC,aAAa,GAAG,SAAhBA,aAAgB,CAACC,KAAD,EAAQC,KAAR,EAAeC,SAAf,EAA6B;EAC/C;EACA,IAAID,KAAK,GAAG,CAAZ,EAAe,OAAO,KAAP;;EACf,IAAIA,KAAK,IAAI,CAAb,EAAgB;IACZ;IACA,IAAME,MAAM,sBAAO,IAAIC,GAAJ,CAAQJ,KAAK,CAACK,GAAN,CAAU,UAAAC,IAAI;MAAA,OAAIA,IAAI,CAACC,KAAT;IAAA,CAAd,CAAR,CAAP,CAAZ,CAFY,CAGZ;;;IACA,IAAMC,OAAO,GAAGR,KAAK,CAACK,GAAN,CAAU,UAACC,IAAD,EAAU;MAChC,OAAOA,IAAI,CAACG,MAAZ;IACH,CAFe,CAAhB;;IAGA,IAAIN,MAAM,CAACO,MAAP,KAAkB,CAAtB,EAAyB;MACrB,IAAMC,aAAa,GAAGH,OAAO,CAACI,IAAR,CAAa,UAACC,CAAD,EAAIC,CAAJ;QAAA,OAAUD,CAAC,GAAGC,CAAd;MAAA,CAAb,EAA8BC,KAA9B,CAAoC,CAApC,EAAuCV,GAAvC,CAA2C,UAAUW,CAAV,EAAaC,CAAb,EAAgB;QAAE,OAAOD,CAAC,GAAGR,OAAO,CAACS,CAAD,CAAlB;MAAwB,CAArF,CAAtB;MACA,IAAMC,UAAU,GAAGP,aAAa,CAACQ,KAAd,CAAoB,UAAAC,KAAK;QAAA,OAAIA,KAAK,IAAI,CAAb;MAAA,CAAzB,CAAnB;;MACA,IAAIF,UAAJ,EAAgB;QACZ,OAAO,IAAP;MACH;IACJ,CAND,MAMO;MACH,IAAMG,WAAW,sBAAO,IAAIjB,GAAJ,CAAQI,OAAO,CAACH,GAAR,CAAY,UAAAC,IAAI;QAAA,OAAIA,IAAJ;MAAA,CAAhB,CAAR,CAAP,CAAjB;;MACA,IAAIe,WAAW,CAACX,MAAZ,KAAuB,CAA3B,EAA8B;QAC1B,OAAO,IAAP;MACH;IACJ;;IAlBW,gCAmBIR,SAnBJ;IAAA,IAmBLoB,KAnBK;;IAoBZ,IAAId,OAAO,CAACe,QAAR,CAAiBD,KAAK,CAACb,MAAvB,CAAJ,EAAoC;MAChC;MACA,IAAMe,aAAa,GAAGxB,KAAK,CAACyB,MAAN,CAAa,UAACnB,IAAD,EAAU;QACzC,OAAOA,IAAI,CAACG,MAAL,KAAgBa,KAAK,CAACb,MAA7B;MACH,CAFqB,CAAtB;MAGAiB,OAAO,CAACC,GAAR,CAAY,kBAAZ,EAAgCH,aAAhC;IACH;;IACD,OAAO,KAAP;EACH;AACJ,CAhCD;;AAkCA,eAAezB,aAAf"},"metadata":{},"sourceType":"module"}